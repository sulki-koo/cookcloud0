-- 계정 상태
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (1, 1, '정상 회원', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (1, 2, '제재 회원', '신고 누적 3회/로그인 제한 7일', NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (1, 3, '탈퇴 회원', NULL, NULL);

-- 회원 등급
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (2, 1, '관리자', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (2, 2, '회원', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (2, 3, '테스트 계정', '테스트용 계정', NULL);

-- 메시지 유형
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (3, 1, '신고', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (3, 2, '좋아요', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (3, 3, '팔로우', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (3, 4, '새 글', '팔로잉하는 계정이 새 게시물 등록시 알림', NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (3, 5, '공지사항', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (3, 6, '기타', NULL, NULL);

-- 게시판 유형
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (4, 1, '레시피', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (4, 2, '공지사항', NULL, NULL);

-- 레시피 유형
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 1, '한식', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 2, '분식', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 3, '일식', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 4, '양식', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 5, '중식', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 6, '아시안', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 7, '야식', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 8, '디저트', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 9, '음료', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (5, 10, '기타', NULL, NULL);

-- 해시태그 유형 코드
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (6, 1, '관리자등록', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (6, 2, '사용자등록', NULL, NULL);

COMMIT;

-- 신고 유형
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (7, 1, '도배', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (7, 2, '욕설/비하', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (7, 3, '혐오 발언', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (7, 4, '저작권 침해', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (7, 5, '기타 부적절한 컨텐츠', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (7, 6, '부적합', '미 신고처리', NULL);

-- 첨부파일 유형
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (8, 1, 'JPG', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (8, 2, 'JPEG', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (8, 3, 'PNG', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (8, 4, 'GIF', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (8, 5, 'MP4', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (8, 6, 'AVI', NULL, NULL);
INSERT INTO CODE (PARENT_CODE, CHILD_CODE, CODE_NAME, CODE_DESCRIPTION, CODE_REMARK)
VALUES (8, 7, 'MOV', NULL, NULL);

COMMIT;

CREATE OR REPLACE TRIGGER TR_RECIPELOG_INSERT
AFTER INSERT ON RECIPE
FOR EACH ROW
BEGIN
    INSERT INTO RECIPELOG (LOGGING_ID, LOGGING_INSERT_AT, RECIPE_ID, LOGGING_ACTION)
    VALUES (RECIPELOG_SEQ.NEXTVAL, SYSDATE, :NEW.RECIPE_ID, 'INSERT');
END;


CREATE OR REPLACE TRIGGER TR_RECIPELOG_UPDATE
AFTER UPDATE ON RECIPE
FOR EACH ROW
BEGIN
    -- 삭제 상태로 변경되는 경우는 제외하고 UPDATE 로그 기록
    IF NOT (:OLD.RECIPE_IS_DELETED = 'N' AND :NEW.RECIPE_IS_DELETED = 'Y') THEN
        INSERT INTO RECIPELOG (LOGGING_ID, LOGGING_INSERT_AT, RECIPE_ID, LOGGING_ACTION)
        VALUES (RECIPELOG_SEQ.NEXTVAL, SYSDATE, :NEW.RECIPE_ID, 'UPDATE');
    END IF;
END;


CREATE OR REPLACE TRIGGER TR_RECIPELOG_DELETE
AFTER UPDATE ON RECIPE
FOR EACH ROW
BEGIN
    -- RECIPE_IS_DELETED 값이 'N'에서 'Y'로 변경된 경우만 로그에 기록
    IF :OLD.RECIPE_IS_DELETED = 'N' AND :NEW.RECIPE_IS_DELETED = 'Y' THEN
        INSERT INTO RECIPELOG (LOGGING_ID, LOGGING_INSERT_AT, RECIPE_ID, LOGGING_ACTION)
        VALUES (RECIPELOG_SEQ.NEXTVAL, SYSDATE, :NEW.RECIPE_ID, 'DELETE');
    END IF;
END;

CREATE OR REPLACE TRIGGER TRG_RECIPE_DELETE_CASCADE
BEFORE UPDATE ON RECIPE
FOR EACH ROW
BEGIN
    -- RECIPE_IS_DELETED 값이 'N'에서 'Y'로 변경된 경우만 실행
    IF :OLD.RECIPE_IS_DELETED = 'N' AND :NEW.RECIPE_IS_DELETED = 'Y' THEN
        -- 1. ATTACHMENT 테이블의 ATTACH_IS_DELETED 값을 'Y'로 변경
        UPDATE ATTACHMENT
        SET ATTACH_IS_DELETED = 'Y'
        WHERE RECIPE_ID = :NEW.RECIPE_ID;

        -- 2. REVIEW 테이블의 REVIEW_IS_DELETED 값을 'Y'로 변경
        UPDATE REVIEW
        SET REVIEW_IS_DELETED = 'Y'
        WHERE RECIPE_ID = :NEW.RECIPE_ID;

        -- 3. RECIPE_TAG 테이블에서 해당 레시피에 연결된 태그 삭제
        DELETE FROM RECIPETAG
        WHERE RECIPE_ID = :NEW.RECIPE_ID;

        -- 4. LIKES 테이블에서 레시피에 대한 좋아요 상태 'N' 처리
        UPDATE LIKES
        SET LIKE_IS_LIKED = 'N'
        WHERE RECIPE_ID = :NEW.RECIPE_ID;

        -- 5. LIKES 테이블에서 리뷰에 대한 좋아요도 'N' 처리 (해당 레시피의 리뷰들에 대해)
        UPDATE LIKES
        SET LIKE_IS_LIKED = 'N'
        WHERE REVIEW_ID IN (
            SELECT REVIEW_ID
            FROM REVIEW
            WHERE RECIPE_ID = :NEW.RECIPE_ID
        );
    END IF;
END;

CREATE OR REPLACE PROCEDURE SP_RESET_LIKERANK AS
BEGIN
    -- 1. 모든 레시피의 LIKERANK를 NULL로 초기화
    UPDATE RECIPE
    SET LIKERANK = NULL;

    -- 2. 좋아요 수 기준 상위 5개 레시피에 순위 부여
    MERGE INTO RECIPE R
    USING (
        SELECT RECIPE_ID, RANKING
        FROM (
            SELECT L.RECIPE_ID, 
                   RANK() OVER (ORDER BY COUNT(L.RECIPE_ID) DESC) AS RANKING
            FROM LIKES L
            JOIN RECIPE R2 ON L.RECIPE_ID = R2.RECIPE_ID
            WHERE L.LIKE_IS_LIKED = 'Y'    
            GROUP BY L.RECIPE_ID
        )
        WHERE RANKING <= 5 -- 여기서 미리 상위 5개만 필터링
    ) ranked
    ON (R.RECIPE_ID = ranked.RECIPE_ID)
    WHEN MATCHED THEN
        UPDATE SET R.LIKERANK = ranked.RANKING;
END;

BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        JOB_NAME        => 'ev_DailyRecipeRankUpdate',     -- 스케줄러 작업 이름
        JOB_TYPE        => 'PLSQL_BLOCK',                   -- 작업 유형
        JOB_ACTION      => 'BEGIN SP_RESET_LIKERANK; END;',  -- 실행할 PLSQL 블록 (프로시저 호출)
        START_DATE      => TO_TIMESTAMP(SYSDATE + 1, 'YYYY-MM-DD HH24:MI:SS'),  -- 시작 날짜 (내일 00:00:00)
        REPEAT_INTERVAL => 'FREQ=DAILY; BYHOUR=0; BYMINUTE=0; BYSECOND=0',  -- 매일 자정 실행
        ENABLED         => TRUE                             -- 스케줄러 활성화
    );
END;